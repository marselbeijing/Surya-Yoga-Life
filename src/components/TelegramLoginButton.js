import React, { useEffect, useState } from 'react';
import './TelegramLoginButton.css';

export default function TelegramLoginButton({ isDarkTheme, toggleTheme }) {
  const [user, setUser] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    function authorize() {
      console.log('=== Telegram WebApp Debug ===');
      console.log('window.Telegram:', window.Telegram);
      console.log('window.Telegram.WebApp:', window.Telegram?.WebApp);
      
      if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        
        console.log('initData:', tg.initData);
        console.log('initDataUnsafe:', tg.initDataUnsafe);
        console.log('initDataUnsafe.user:', tg.initDataUnsafe?.user);
        console.log('platform:', tg.platform);
        console.log('version:', tg.version);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
          console.log('‚úÖ User found in initDataUnsafe:', tg.initDataUnsafe.user);
          setUser(tg.initDataUnsafe.user);
          setLoading(false);
          return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –µ—Å—Ç—å initData
        if (tg.initData) {
          console.log('‚ö†Ô∏è initData exists but no user in initDataUnsafe');
          console.log('initData length:', tg.initData.length);
          console.log('initData preview:', tg.initData.substring(0, 100) + '...');
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å initData –≤—Ä—É—á–Ω—É—é
          try {
            const urlParams = new URLSearchParams(tg.initData);
            const userParam = urlParams.get('user');
            if (userParam) {
              const parsedUser = JSON.parse(userParam);
              console.log('‚úÖ User parsed from initData:', parsedUser);
              setUser(parsedUser);
              setLoading(false);
              return;
            }
          } catch (e) {
            console.error('‚ùå Error parsing initData:', e);
          }
        }
        
        console.log('‚ùå No user data found');
      } else {
        console.log('‚ùå Telegram WebApp not available');
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—à–∏–±–∫–∏
      setTimeout(() => {
        setLoading(false);
        setError('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram Mini App.');
      }, 3000);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
    setTimeout(authorize, 500);
  }, []);

  return (
    <div className="account-page">
      {/* –°–µ–∫—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */}
      <div className="account-card">
        <div className="account-avatar">
          <img
            src={user?.photo_url || 'https://telegram.org/img/t_logo.png'}
            alt={user?.first_name || 'Telegram'}
            className="account-avatar-img"
          />
        </div>
        <div className="account-info">
          <div className="account-name">{user ? `${user.first_name} ${user.last_name || ''}` : '–ì–æ—Å—Ç—å'}</div>
          <div className="account-id">ID: {user?.id || '‚Äî'}</div>
          <div className="account-status success">
            {user ? '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : 
             loading ? 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...' : '‚ùå ' + (error || '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram...')}
          </div>
          {!loading && !user && (
            <div style={{fontSize: '0.85em', color: '#bba6d4', marginTop: 6}}>
              –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Mini App –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ –≤ Telegram Desktop.<br/>
              –í –±—Ä–∞—É–∑–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
            </div>
          )}
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <div className="settings-section">
        <div className="settings-header">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
        </div>
        
        <div className="settings-content">
          <div className="setting-item">
            <div className="setting-info">
              <h3>–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3>
              <p>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π</p>
            </div>
            <div className="theme-toggle">
              <input
                type="checkbox"
                id="theme-switch"
                checked={isDarkTheme}
                onChange={toggleTheme}
                className="theme-switch-input"
              />
              <label htmlFor="theme-switch" className="theme-switch-label">
                <span className="theme-switch-slider"></span>
              </label>
            </div>
          </div>
          
          <div className="setting-item">
            <div className="setting-info">
              <h3>–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
              <p>Surya Yoga Life - –≤–∞—à –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏</p>
            </div>
          </div>
          
          <div className="setting-item">
            <div className="setting-info">
              <h3>–í–µ—Ä—Å–∏—è</h3>
              <p>1.0.0</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 