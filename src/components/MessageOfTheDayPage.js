import React, { useState, useEffect } from 'react';

function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

const WISE_QUOTES = [
  {
    title: '–ú—É–¥—Ä–∞—è —Ñ—Ä–∞–∑–∞ –¥–Ω—è',
    description: '–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ –≥–ª—É–±–æ–∫–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞.',
    message: '–¢–æ–ª—å–∫–æ –æ—Ç–ø—É—Å–∫–∞—è, –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º–∏. ‚Äî –ë—É–¥–¥–∞',
    icon: 'üßò‚Äç‚ôÇÔ∏è',
  },
  {
    title: '–ú—É–¥—Ä–∞—è —Ñ—Ä–∞–∑–∞ –¥–Ω—è',
    description: '–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ –≥–ª—É–±–æ–∫–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞.',
    message: '–¢–∞–º, –≥–¥–µ –ª—é–±–æ–≤—å, —Ç–∞–º –∏ –∂–∏–∑–Ω—å. ‚Äî –ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏',
    icon: '‚ù§Ô∏è',
  },
  {
    title: '–ú—É–¥—Ä–∞—è —Ñ—Ä–∞–∑–∞ –¥–Ω—è',
    description: '–ö–æ—Ä–æ—Ç–∫–æ–µ –∏ –≥–ª—É–±–æ–∫–æ–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞.',
    message: '–í—Å—ë, —á—Ç–æ —Ç—ã –∏—â–µ—à—å, —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è. ‚Äî –≠–∫—Ö–∞—Ä—Ç –¢–æ–ª–ª–µ',
    icon: '‚ú®',
  },
];

const SYMBOLS = [
  {
    title: '–°–∏–º–≤–æ–ª –¥–Ω—è: –û–º',
    description: '–û–º ‚Äî –∑–≤—É–∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π, –≥–∞—Ä–º–æ–Ω–∏—è –∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å.',
    message: '–°–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ç–∏—à–∏–Ω—É. –ü—É—Å—Ç—å –û–º –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –µ–¥–∏–Ω—Å—Ç–≤–µ —Å –º–∏—Ä–æ–º.',
    icon: '‡•ê',
  },
  {
    title: '–°–∏–º–≤–æ–ª –¥–Ω—è: –ò–Ω—å-–Ø–Ω',
    description: '–ò–Ω—å-–Ø–Ω ‚Äî –±–∞–ª–∞–Ω—Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–µ–π.',
    message: '–ó–∞–º–µ—Ç—å —Å–≤–µ—Ç –∏ —Ç–µ–Ω—å –≤ —Å–µ–±–µ. –ì–∞—Ä–º–æ–Ω–∏—è ‚Äî –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ–±–æ–∏—Ö –Ω–∞—á–∞–ª.',
    icon: '‚òØÔ∏è',
  },
  {
    title: '–°–∏–º–≤–æ–ª –¥–Ω—è: –°–µ—Ä–¥—Ü–µ',
    description: '–°–µ—Ä–¥—Ü–µ ‚Äî —Å–∏–º–≤–æ–ª –ª—é–±–≤–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è.',
    message: '–û—Ç–∫—Ä–æ–π —Å–µ—Ä–¥—Ü–µ –º–∏—Ä—É. –ü—É—Å—Ç—å –¥–æ–±—Ä–æ—Ç–∞ –≤–µ–¥—ë—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è.',
    icon: 'üíñ',
  },
];

const UNIVERSE = [
  {
    title: '–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π',
    description: '–¢—ë–ø–ª–æ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ª–∏—á–Ω–æ –¥–ª—è —Ç–µ–±—è.',
    message: '–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏. –î–æ–≤–µ—Ä—å—Å—è –ø–æ—Ç–æ–∫—É –∂–∏–∑–Ω–∏ ‚Äî –≤—Å—ë —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º.',
    icon: 'üåå',
  },
  {
    title: '–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π',
    description: '–¢—ë–ø–ª–æ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ª–∏—á–Ω–æ –¥–ª—è —Ç–µ–±—è.',
    message: '–°–µ–≥–æ–¥–Ω—è –í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç: ¬´–¢—ã –¥–æ—Å—Ç–æ–∏–Ω —Å—á–∞—Å—Ç—å—è. –ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å!¬ª',
    icon: 'üå†',
  },
  {
    title: '–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π',
    description: '–¢—ë–ø–ª–æ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ª–∏—á–Ω–æ –¥–ª—è —Ç–µ–±—è.',
    message: '–í–µ—Ä—å –≤ —Å–µ–±—è. –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, —É–∂–µ —Ä—è–¥–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–≥–ª—è–Ω–∏—Å—å.',
    icon: 'üåà',
  },
];

function getTwoRandomCards() {
  const types = [WISE_QUOTES, SYMBOLS, UNIVERSE];
  let idx1 = getRandomInt(3);
  let idx2 = getRandomInt(3);
  while (idx2 === idx1) idx2 = getRandomInt(3);
  const card1 = types[idx1][getRandomInt(types[idx1].length)];
  const card2 = types[idx2][getRandomInt(types[idx2].length)];
  return [card1, card2];
}

function MessageOfTheDayPage({ onBack }) {
  const [cards, setCards] = useState(() => {
    const saved = localStorage.getItem('messageOfTheDayCards');
    return saved ? JSON.parse(saved) : getTwoRandomCards();
  });
  
  const [showCards, setShowCards] = useState(() => {
    const lastUpdate = localStorage.getItem('messageOfTheDayLastUpdate');
    return !!lastUpdate; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
  });
  
  const [canUpdate, setCanUpdate] = useState(true);
  const [timeUntilNext, setTimeUntilNext] = useState('');

  useEffect(() => {
    const checkUpdateAvailability = () => {
      const lastUpdate = localStorage.getItem('messageOfTheDayLastUpdate');
      const now = new Date();
      
      if (lastUpdate) {
        const lastUpdateDate = new Date(lastUpdate);
        const nextUpdateTime = new Date(lastUpdateDate);
        nextUpdateTime.setDate(nextUpdateTime.getDate() + 1);
        
        if (now < nextUpdateTime) {
          setCanUpdate(false);
          setShowCards(true);
          const timeDiff = nextUpdateTime - now;
          const hours = Math.floor(timeDiff / (1000 * 60 * 60));
          const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
          setTimeUntilNext(`${hours}—á ${minutes}–º`);
        } else {
          setCanUpdate(true);
          setShowCards(false);
          setTimeUntilNext('');
        }
      } else {
        setCanUpdate(true);
        setShowCards(false);
      }
    };

    checkUpdateAvailability();
    const interval = setInterval(checkUpdateAvailability, 60000);
    
    return () => clearInterval(interval);
  }, []);

  const handleShowMessage = () => {
    if (!canUpdate) return;
    
    const newCards = getTwoRandomCards();
    setCards(newCards);
    setShowCards(true);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    localStorage.setItem('messageOfTheDayCards', JSON.stringify(newCards));
    localStorage.setItem('messageOfTheDayLastUpdate', new Date().toISOString());
    
    setCanUpdate(false);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    const now = new Date();
    const nextUpdate = new Date(now);
    nextUpdate.setDate(nextUpdate.getDate() + 1);
    const timeDiff = nextUpdate - now;
    const hours = Math.floor(timeDiff / (1000 * 60 * 60));
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    setTimeUntilNext(`${hours}—á ${minutes}–º`);
  };

  return (
    <div className="knowledge-page" style={{display: 'flex', flexDirection: 'column', minHeight: 'calc(100vh - 64px)'}}>
      <button 
        onClick={onBack}
        className="knowledge-back"
        style={{display: 'block', margin: '-12px auto 4px auto'}}>‚Üê –ù–∞–∑–∞–¥</button>
      <div style={{
        background: '#f7f3ff',
        borderRadius: 16,
        padding: '24px 16px',
        color: '#000',
        fontFamily: 'Comfortaa, cursive',
        fontSize: '0.95rem',
        textAlign: 'center',
        boxShadow: '0 2px 12px 0 rgba(124,91,179,0.07)',
        maxWidth: 480,
        margin: '18px auto 0 auto',
        lineHeight: 1.7
      }}>
        –û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –ø–æ—Å–ª–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è.<br/><br/>
        –ú—É–¥—Ä—ã–µ —Ñ—Ä–∞–∑—ã, —Å–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π ‚Äî –≤—Å—ë, —á—Ç–æ–±—ã –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤—è–∑—å —Å —Å–æ–±–æ–π.
      </div>
      
      {showCards && (
        <div style={{display: 'flex', flexDirection: 'column', gap: 18, margin: '28px 0 0 0'}}>
          {cards.map((card, idx) => (
            <div key={idx} style={{
              background: '#fff',
              borderRadius: 14,
              boxShadow: '0 2px 8px 0 rgba(124,91,179,0.08)',
              padding: '18px 14px',
              maxWidth: 420,
              margin: '0 auto',
              textAlign: 'center',
              fontFamily: 'Comfortaa, cursive',
              color: '#222',
            }}>
              <div style={{fontSize: 28, marginBottom: 6}}>{card.icon}</div>
              <div style={{fontWeight: 700, fontSize: '1.08rem', marginBottom: 4}}>{card.title}</div>
              <div style={{fontSize: '0.92rem', color: '#7c5bb3', marginBottom: 6}}>{card.description}</div>
              <div style={{fontSize: '1.01rem', marginTop: 8}}>{card.message}</div>
            </div>
          ))}
        </div>
      )}
      
      <button 
        onClick={handleShowMessage} 
        disabled={!canUpdate}
        style={{
          margin: '32px auto 0 auto', 
          display: 'block', 
          background: canUpdate ? '#b484f7' : '#ccc', 
          color: '#fff', 
          border: 'none', 
          borderRadius: 12, 
          padding: '12px 32px', 
          fontFamily: 'Comfortaa, cursive', 
          fontWeight: 700, 
          fontSize: '1.01rem', 
          cursor: canUpdate ? 'pointer' : 'not-allowed', 
          boxShadow: '0 2px 8px 0 rgba(124,91,179,0.08)',
          opacity: canUpdate ? 1 : 0.6
        }}>
        {canUpdate ? '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ' : `–°–ª–µ–¥—É—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${timeUntilNext}`}
      </button>
    </div>
  );
}

export default MessageOfTheDayPage; 